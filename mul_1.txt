`include "defines.vh"
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2019/06/25 13:51:28
// Design Name: 
// Module Name: div
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module mul_1(
	input wire rst,							//复位
	input wire clk,							//时钟
	input wire signed_mul_i,						//是否为有符号运算，1位有符号
	input wire[31:0] opdata1_i,				//被除数
	input wire[31:0] opdata2_i,				//除数
	input wire start_i,						//是否开始运算
	input wire annul_i,						//是否取消运算，1为取消
	output reg[63:0] result_o,				//乘法运算结果
	output reg ready_o						//乘法运算是否结束
);
	
	reg [5:0] cnt;							//记录移位进行了几轮				
    reg [63:0] mulend;
	reg [1:0] state;						//乘法器处于的状态	
	reg[31:0] temp_op1;
	reg[31:0] temp_op2;
	reg [63:0] mul_tmp;
	
	
	always @ (posedge clk) begin
		if (rst) begin
			state <= `DivFree;
			result_o <= {`ZeroWord,`ZeroWord};
			ready_o <= `DivResultNotReady;
		end else begin
			case(state)
			
				`DivFree: begin			//乘法器空闲
					if (start_i == `DivStart && annul_i == 1'b0) begin
							state <= `DivOn;					
							cnt <= 6'b000000;
							if(signed_mul_i == 1'b1 && opdata1_i[31] == 1'b1) begin			
								temp_op1 = ~opdata1_i + 1;
							end else begin
								temp_op1 = opdata1_i;
							end
							if (signed_mul_i == 1'b1 && opdata2_i[31] == 1'b1 ) begin			
								temp_op2 = ~opdata2_i + 1;
							end else begin
								temp_op2 = opdata2_i;
							end
                            mulend <= {`ZeroWord, `ZeroWord};
                            mul_tmp <= {`ZeroWord,temp_op1};
						end
					else begin
						ready_o <= `DivResultNotReady;
						result_o <= {`ZeroWord, `ZeroWord};
					end
				end
				
				`DivOn: begin				
								//进行乘法运算
						if(cnt != 6'b100000) begin
                                if(temp_op2[0]) begin
                                    mulend <= mulend + mul_tmp;
                                end
                              mul_tmp <= mul_tmp << 1; 
                              temp_op2 <= temp_op2 >> 1;
							  cnt <= cnt +1;		//乘法运算次数
						end else begin
							if ((signed_mul_i == 1'b1) && ((opdata1_i[31] ^ opdata2_i[31]) == 1'b1)) begin
								mulend[63:0] <= (~mulend[63:0] + 1);
								//mulend[63:32] <= ~(mulend[63:32]-1)+1 ;
							end
							/*if ((signed_mul_i == 1'b1) && ((opdata1_i[31] ^ mulend[63]) == 1'b1)) begin
								mulend[63:32] <= (~mulend[63:32] + 1);
							end*/
							state <= `DivEnd;
							cnt <= 6'b000000;
						end
					end 
				
				`DivEnd: begin			//乘法结束
					result_o <= mulend;
					ready_o <= `DivResultReady;
					temp_op1 <= `ZeroWord;
					temp_op2 <= `ZeroWord;
					if (start_i == `DivStop) begin
						state <= `DivFree;
						ready_o <= `DivResultNotReady;
						result_o <= {`ZeroWord, `ZeroWord};
					end
				end
				
			endcase
		end
	end


endmodule